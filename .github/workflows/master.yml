name: CI-Unittest

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8]

    steps:
      # 현재 레포지토리 코드 업로드
      - uses: actions/checkout@v2

      # 정상적으로 clone 되었는지 확인
      - name: Run pwd
        run: pwd
      - name: Check directory
        run: ls -al
      
      # 필요 환경/프레임워크/언어 설치
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # 필요 패키지 설치
      - name: Install pip, pytest, flake8
        run:
          python -m pip install --upgrade pip
          pip install pytest
          pip install flake8
      
      # 코드 Lint 검증
      - name: Linting with flake8
        run:
          flake8

      # 유닛 테스트
      - name: Run my unittest
        run:
          pytest
  
  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Build & Push Docker image
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: comstering/learn-cicd
          tags: 1.0.0, latest
          registry: docker.io
          dockerfile: flask/Dockerfile
          username: ${{ secrets.DOCKERHUB_USRNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
  deploy:
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Write Config & Key Files
        run:
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{ secrets.OCI_USER_OCID }}" >> ~/.oci/config
          echo "fingerprint=${{ secrets.OCI_FINGERPRINT }}" >> ~/.oci/config
          echo "region=${{ secrets.OCI_REGION }}" >> ~/.oci/config
          echo "tenancy=${{ secrets.OCI_TENANCY_OCID }}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{ secrets.OCI_KEY_FILE }}" >> ~/.oci/key.pem
      
      - name: Install OCI CLI
        run:
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "::add-path::/home/runner/bin"
          exec -l $SHELL

      - name: Fix Config File Permissions
        run:
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem
      
      - name: Get Instance IP
        run:
          echo "::set-env name=INSTANCE_IP::$( \
            oci compute instance list-vnics \
            --instance-id ${{ secrets.INSTANCE_OCID }} \
            --query 'data [0]."public-ip"' \
            --raw-output \
          )"

      - name: Wait For SSH
        run:
          while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
            sleep 5
            echo "SSH not available..."
          done; echo "SSH ready!"
      
      - name: Start App
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.OCI_INSTANCE_SSH_KEY }}
          script:
            docker rm -f my-flask-app && docker pull comstering/learn-cicd:latest && docker run --rm -d --name my-flask-app -p 8000:5000 comstering/learn-cicd:latest
